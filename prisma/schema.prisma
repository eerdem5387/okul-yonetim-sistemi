// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  tcNumber    String   @unique
  birthDate   DateTime
  phone       String?
  email       String?
  address     String?
  parentName  String
  parentPhone String
  parentEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  clubSelections     ClubSelection[]
  newRegistrations   NewRegistration[]
  renewals           Renewal[]
  uniformContracts   UniformContract[]
  mealContracts      MealContract[]
  serviceContracts   ServiceContract[]
  bookContracts      BookContract[]

  @@map("students")
}

model Club {
  id          String   @id @default(cuid())
  name        String
  description String?
  capacity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  selections ClubSelection[]

  @@map("clubs")
}

model ClubSelection {
  id        String   @id @default(cuid())
  studentId String
  clubId    String
  createdAt DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  club    Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([studentId, clubId])
  @@map("club_selections")
}

model NewRegistration {
  id        String   @id @default(cuid())
  studentId String
  // Yeni kayıt sözleşmesi alanları
  contractData Json
  pdfPath      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("new_registrations")
}

model Renewal {
  id        String   @id @default(cuid())
  studentId String
  // Kayıt yenileme sözleşmesi alanları
  contractData Json
  pdfPath      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("renewals")
}

model UniformContract {
  id        String   @id @default(cuid())
  studentId String
  // Forma sözleşmesi alanları
  contractData Json
  pdfPath      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("uniform_contracts")
}

model MealContract {
  id        String   @id @default(cuid())
  studentId String
  // Yemek sözleşmesi alanları
  contractData Json
  pdfPath      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("meal_contracts")
}

model ServiceContract {
  id        String   @id @default(cuid())
  studentId String
  // Servis sözleşmesi alanları
  contractData Json
  pdfPath      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("service_contracts")
}

model BookContract {
  id        String   @id @default(cuid())
  studentId String
  // Kitap sözleşmesi alanları
  contractData Json
  pdfPath      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("book_contracts")
}